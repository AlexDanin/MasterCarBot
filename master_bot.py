from telebot import TeleBot, types
import json


TOKEN = '6971909537:AAGbRyjyE2WfLqLpBxZobDuLCo8iSjM21BY'
bot = TeleBot(TOKEN)


@bot.message_handler(commands=['start'])
def start_message(message):
    chat_id = message.chat.id
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É', callback_data='sign_in'))
    bot.send_message(chat_id, 'üîê <b>–í–æ–π—Ç–∏</b> –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è <u>—Å—Ç–∞—Ä—Ç–∞</u>.', reply_markup=markup, parse_mode='html')


@bot.message_handler(commands=['main_menu'])
def main_message(message):
    chat_id = message.chat.id

    if not is_sign_in(chat_id):
        start_message(message)
    else:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ', callback_data='car_reg'))
        bot.send_message(chat_id, 'main menu message.', reply_markup=markup)


def del_user_log(chat_id):
    if is_sign_in(chat_id):
        with open("sign_in_users.json", "r") as json_file:
            data = json.load(json_file)

        chat_id = str(chat_id)

        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ –∫–ª—é—á—É)
        if chat_id in data:
            del data[chat_id]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
        with open("sign_in_users.json", "w") as json_file:
            json.dump(data, json_file)


@bot.message_handler(commands=['sign_out'])
def out_message(message):
        chat_id = message.chat.id

        if is_sign_in(chat_id):
            del_user_log(chat_id)
            bot.send_message(chat_id,  "üö™ <b>–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.</b>\n", parse_mode='html')
            

@bot.callback_query_handler(func=lambda callback: True)
def callback_message(callback):
    chat_id = callback.message.chat.id
    call_funk = callback.data
    message = callback.message

    match call_funk:
        case 'sign_in':
            sign_in(message)
        case 'car_reg':
            car_registration(message)
        case 'exit_reg':
            exit_registration(message)
        case 'add_device':
            add_device(message)
        case 'add_name':
            add_name(message) 
        case 'add_gosnum':
            add_gosnum(message)   
        case 'add_brand':
            add_brand(message)
        case 'add_weels':
            add_weels(message)
        case 'add_brandWs':
            add_brandWs(message)
            


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
def is_registered(login):
    with open('registered_users.json', 'r') as file:
        registered_users = json.load(file)
        return str(login) in registered_users.keys()
    

def is_acreditation(login, passwd):
    with open('registered_users.json', 'r') as file:
        registered_users = json.load(file)
        return passwd == registered_users[login]
    
def is_sign_in(chat_id):
    with open('sign_in_users.json', 'r') as file:
        registered_users = json.load(file)
        return str(chat_id) in list(registered_users.keys())

def add_user_log(chat_id, login):
    if not is_sign_in(chat_id):
        with open('sign_in_users.json', 'r') as file:
            registered_users = json.load(file)

        registered_users[chat_id] = str(login)

        with open('sign_in_users.json', 'w') as file:
            json.dump(registered_users, file)
    

def get_passwd(message, login):
    chat_id = message.chat.id

    passwd = message.text
    if is_acreditation(login, passwd):
        bot.send_message(chat_id,  "‚úÖ <b>–í—Ö–æ–¥</b> –≤ —Å–∏—Å—Ç–µ–º—É <u>–≤—ã–ø–æ–ª–Ω–µ–Ω.</u>\n", parse_mode='html')
        add_user_log(chat_id, login)
        main_message(message)
    elif passwd == '/start': # for break from menu, do you think that we should add InlineKeyboardButton?
        start_message(message)
    elif passwd == '/sign_out':
        out_message(message)
    else:
        bot.send_message(chat_id, "üö´ <b>–ù–µ–≤–µ—Ä–Ω—ã–π</b> <u>–ø–∞—Ä–æ–ª—å.</u> \n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.\n", parse_mode='html')
        bot.register_next_step_handler(message,  get_passwd, login=login)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_login(message):
    chat_id = message.chat.id
    login = message.text

    if is_registered(login):
        bot.send_message(chat_id, "üîë <b>–õ–æ–≥–∏–Ω</b> –µ—Å—Ç—å <u>–≤ —Å–∏—Å—Ç–µ–º–µ.</u> \n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å.\n", parse_mode='html')
        bot.register_next_step_handler(message,  get_passwd, login=login)
    elif login == '/start': # for break from menu, do you think that we should add InlineKeyboardButton?
        start_message(message)
    else:
        bot.send_message(chat_id, "üö´ <b>–õ–æ–≥–∏–Ω</b> <u>–Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω</u> –≤ —Å–∏—Å—Ç–µ–º–µ. \n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.\n", parse_mode='html')
        bot.register_next_step_handler(message,  get_login)


def sign_in(message):
    chat_id = message.chat.id

    if not is_sign_in(chat_id):
        bot.send_message(chat_id,  "üíº <b>–í–≤–µ–¥–∏—Ç–µ</b> –ª–æ–≥–∏–Ω –∫–æ–º–ø–∞–Ω–∏–∏.", parse_mode='html')
        bot.register_next_step_handler(message,  get_login)
    else: 
        main_message(message)


def car_registration(message, **kwags):
    chat_id = message.chat.id

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üö´', callback_data='exit_reg'))
    bot.send_message(chat_id, '‚ùó   ‚ùó   –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.  ‚ùó  ‚ùó', reply_markup=markup)
    
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('‚öôÔ∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ', callback_data='add_device')
    btn2 = types.InlineKeyboardButton('üè¢ –ö–æ–º–ø–∞–Ω–∏—è', callback_data='add_name')
    markup.row(btn1, btn2)
    btn3 = types.InlineKeyboardButton('üöò –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä', callback_data='add_gosnum')
    btn4 = types.InlineKeyboardButton('üöó –ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è', callback_data='add_brand')
    markup.row(btn3, btn4)
    btn5 = types.InlineKeyboardButton('üõû –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–µ—Å', callback_data='add_weels')
    btn6 = types.InlineKeyboardButton('üîÑ –ú–∞—Ä–∫–∞ —à–∏–Ω', callback_data='add_brandWs')
    markup.row(btn5, btn6)
    markup.add(types.InlineKeyboardButton('‚úÖ', callback_data='end_reg'))
    if not kwags:
        bot.send_message(chat_id,  f"‚öôÔ∏è <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ <u>—É—Å—Ç—Ä–æ–π—Å—Ç–≤</u> –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö</b> \nüÜî <b>–£–∫–∞–∂–∏—Ç–µ</b> <u>ID</u> —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\nüè¢ <b>–í–≤–µ–¥–∏—Ç–µ</b> <u>–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏</u>\nüöó <b>–í–≤–µ–¥–∏—Ç–µ</b> –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π <u>–Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è</u>\nüöò <b>–£–∫–∞–∂–∏—Ç–µ</b> <u>–º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è</u>\nüõû <b>–í–≤–µ–¥–∏—Ç–µ</b> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ <u>–∫–æ–ª—ë—Å</u> –∞–≤—Ç–æ–º–æ–±–∏–ª—è\nüîÑ <b>–£–∫–∞–∂–∏—Ç–µ</b> <u>–º–∞—Ä–∫—É —à–∏–Ω</u>\n", parse_mode='html', reply_markup=markup)
    else:
        bot.send_message(chat_id,  f"‚öôÔ∏è <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ <u>—É—Å—Ç—Ä–æ–π—Å—Ç–≤</u> –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö</b> \nüÜî <b>{kwags['device']}</b> <u>ID</u> —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\nüè¢ <b>–í–≤–µ–¥–∏—Ç–µ</b> <u>–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏</u>\nüöó <b>–í–≤–µ–¥–∏—Ç–µ</b> –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π <u>–Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è</u>\nüöò <b>–£–∫–∞–∂–∏—Ç–µ</b> <u>–º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è</u>\nüõû <b>–í–≤–µ–¥–∏—Ç–µ</b> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ <u>–∫–æ–ª—ë—Å</u> –∞–≤—Ç–æ–º–æ–±–∏–ª—è\nüîÑ <b>–£–∫–∞–∂–∏—Ç–µ</b> <u>–º–∞—Ä–∫—É —à–∏–Ω</u>\n", parse_mode='html', reply_markup=markup)

    

def exit_registration(message):
    chat_id = message.chat.id

    bot.send_message(chat_id, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.')
    main_message(message)

def add_device(message):
    chat_id = message.chat.id

    bot.send_message(chat_id, 'üÜî <b>–£–∫–∞–∂–∏—Ç–µ</b> <u>ID</u> —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞', parse_mode='html')
    bot.register_next_step_handler(message, device_property)

def add_name(message):
    chat_id = message.chat.id

    bot.send_message(chat_id, 'üè¢ <b>–í–≤–µ–¥–∏—Ç–µ</b> <u>–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏</u>', parse_mode='html')
    bot.register_next_step_handler(message, name_property)

def add_gosnum(message):
    chat_id = message.chat.id

    bot.send_message(chat_id, 'üöó <b>–í–≤–µ–¥–∏—Ç–µ</b> –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π <u>–Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è</u>', parse_mode='html')

def add_brand(message):
    chat_id = message.chat.id

    bot.send_message(chat_id, 'üöò <b>–£–∫–∞–∂–∏—Ç–µ</b> <u>–º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è</u>', parse_mode='html')

def add_weels(message):
    chat_id = message.chat.id

    bot.send_message(chat_id, 'üõû <b>–í–≤–µ–¥–∏—Ç–µ</b> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ <u>–∫–æ–ª—ë—Å</u> –∞–≤—Ç–æ–º–æ–±–∏–ª—è', parse_mode='html')

def add_brandWs(message):
    chat_id = message.chat.id

    bot.send_message(chat_id, 'üîÑ <b>–£–∫–∞–∂–∏—Ç–µ</b> <u>–º–∞—Ä–∫—É —à–∏–Ω</u>', parse_mode='html')

def device_property(message):
    chat_id = message.chat.id

    device = message.text
    bot.send_message(chat_id, f'–î–µ–≤–∞–π—Å {device} –¥–æ–±–∞–≤–ª–µ–Ω')
    car_registration(message, device=device)

def name_property(message):
    pass

def gosnum_property(message):
    pass

def brand_property(message):
    pass

def weels_property(message):
    pass

def brandWs_property(message):
    pass



bot.infinity_polling()